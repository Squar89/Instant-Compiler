#ifndef ABSYN_HEADER
#define ABSYN_HEADER

#include<string>
#include<vector>

//C++ Abstract Syntax Interface generated by the BNF Converter.

/********************   TypeDef Section    ********************/

typedef int Integer;
typedef char Char;
typedef std::string String;
typedef std::string Ident;




/********************   Forward Declarations    ********************/

class Program;
class Stmt;
class Exp;
class Prog;
class SAss;
class SExp;
class ExpOp;
class ExpAdd;
class ExpSub;
class ExpMul;
class ExpDiv;
class ExpLit;
class ExpVar;
class ListStmt;


/********************   Visitor Interfaces    ********************/
class Visitor
{
public:
  virtual ~Visitor() {}
  virtual void visitProgram(Program *p, bool silent) = 0;
  virtual void visitStmt(Stmt *p, bool silent) = 0;
  virtual void visitExp(Exp *p, bool silent) = 0;
  virtual void visitProg(Prog *p, bool silent) = 0;
  virtual void visitSAss(SAss *p, bool silent) = 0;
  virtual void visitSExp(SExp *p, bool silent) = 0;
  virtual void visitExpAdd(ExpAdd *p, bool silent) = 0;
  virtual void visitExpSub(ExpSub *p, bool silent) = 0;
  virtual void visitExpMul(ExpMul *p, bool silent) = 0;
  virtual void visitExpDiv(ExpDiv *p, bool silent) = 0;
  virtual void visitExpLit(ExpLit *p, bool silent) = 0;
  virtual void visitExpVar(ExpVar *p, bool silent) = 0;
  virtual void visitListStmt(ListStmt *p, bool silent) = 0;
  virtual void visitInteger(Integer x, bool silent) = 0;
  virtual void visitIdent(Ident x, bool silent) = 0;

};


class Visitable
{
 public:
  virtual ~Visitable() {}
  virtual void accept(Visitor *v, bool silent) = 0;
};


/********************   Abstract Syntax Classes    ********************/

class Program : public Visitable
{
public:
  virtual Program *clone() const = 0;

};

class Stmt : public Visitable
{
public:
  virtual Stmt *clone() const = 0;

};

class Exp : public Visitable
{
public:
  virtual Exp *clone() const = 0;
};

class ExpOp : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  ExpOp(const ExpOp &);
  ExpOp(Exp *p1, Exp *p2);
  ~ExpOp();
  void swap(ExpOp &);
};



class Prog : public Program
{
public:
  ListStmt *liststmt_;

  Prog(const Prog &);
  Prog &operator=(const Prog &);
  Prog(ListStmt *p1);
  ~Prog();
  virtual void accept(Visitor *v, bool silent);
  virtual Prog *clone() const;
  void swap(Prog &);
};

class SAss : public Stmt
{
public:
  Ident ident_;
  Exp *exp_;

  SAss(const SAss &);
  SAss &operator=(const SAss &);
  SAss(Ident p1, Exp *p2);
  ~SAss();
  virtual void accept(Visitor *v, bool silent);
  virtual SAss *clone() const;
  void swap(SAss &);
};

class SExp : public Stmt
{
public:
  Exp *exp_;

  SExp(const SExp &);
  SExp &operator=(const SExp &);
  SExp(Exp *p1);
  ~SExp();
  virtual void accept(Visitor *v, bool silent);
  virtual SExp *clone() const;
  void swap(SExp &);
};

class ExpAdd : public ExpOp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  ExpAdd(const ExpAdd &);
  ExpAdd &operator=(const ExpAdd &);
  ExpAdd(Exp *p1, Exp *p2);
  ~ExpAdd();
  virtual void accept(Visitor *v, bool silent);
  virtual ExpAdd *clone() const;
  void swap(ExpAdd &);
};

class ExpSub : public ExpOp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  ExpSub(const ExpSub &);
  ExpSub &operator=(const ExpSub &);
  ExpSub(Exp *p1, Exp *p2);
  ~ExpSub();
  virtual void accept(Visitor *v, bool silent);
  virtual ExpSub *clone() const;
  void swap(ExpSub &);
};

class ExpMul : public ExpOp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  ExpMul(const ExpMul &);
  ExpMul &operator=(const ExpMul &);
  ExpMul(Exp *p1, Exp *p2);
  ~ExpMul();
  virtual void accept(Visitor *v, bool silent);
  virtual ExpMul *clone() const;
  void swap(ExpMul &);
};

class ExpDiv : public ExpOp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  ExpDiv(const ExpDiv &);
  ExpDiv &operator=(const ExpDiv &);
  ExpDiv(Exp *p1, Exp *p2);
  ~ExpDiv();
  virtual void accept(Visitor *v, bool silent);
  virtual ExpDiv *clone() const;
  void swap(ExpDiv &);
};

class ExpLit : public Exp
{
public:
  Integer integer_;

  ExpLit(const ExpLit &);
  ExpLit &operator=(const ExpLit &);
  ExpLit(Integer p1);
  ~ExpLit();
  virtual void accept(Visitor *v, bool silent);
  virtual ExpLit *clone() const;
  void swap(ExpLit &);
};

class ExpVar : public Exp
{
public:
  Ident ident_;

  ExpVar(const ExpVar &);
  ExpVar &operator=(const ExpVar &);
  ExpVar(Ident p1);
  ~ExpVar();
  virtual void accept(Visitor *v, bool silent);
  virtual ExpVar *clone() const;
  void swap(ExpVar &);
};



class ListStmt : public Visitable, public std::vector<Stmt*>
{
public:
  virtual void accept(Visitor *v, bool silent);
  virtual ListStmt *clone() const;
};



#endif
